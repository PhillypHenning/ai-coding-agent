name: Create/Update infrastructure

on:
  workflow_call:
    inputs:
      tf_vars_files:
        description: "Used in the terraform command, format: -var-file=var-file-1.tfvars -var-file=var-file-2.tfvars"
        type: string
        required: true
      image_tag:
        description: Image tag
        type: string
        required: true
      domain_name:
        description: Target domain name
        type: string
        required: true
      environment_tag:
        description: Environment tag for container
        required: true
        type: string
      s3_key:
        description: S3 key for tf state
        required: true
        type: string
      enable_execute_command:
        type: boolean
        default: false

env:
  AWS_REGION: us-east-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/infra
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_AI }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_AI }}
          aws-region: ${{ env.AWS_REGION }}
      
      - run: terraform init -backend-config="key=${{ inputs.s3_key }}"

      - id: plan
        run: |
          terraform plan -no-color ${{ inputs.tf_vars_files }} \
            -var "image_tag=${{ inputs.image_tag }}" \
            -var "domain_name=${{ inputs.domain_name }}" \
            -var "target_environment=${{ inputs.environment_tag }}" \
            -var "enable_execute_command=${{ inputs.enable_execute_command }}"

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve ${{ inputs.tf_vars_files }} \
            -var "image_tag=${{ inputs.image_tag }}" \
            -var "domain_name=${{ inputs.domain_name }}" \
            -var "target_environment=${{ inputs.environment_tag }}" \
            -var "enable_execute_command=${{ inputs.enable_execute_command }}"

      - name: Wait for ECS service stable
        run: |
          cluster=$(terraform output -raw ecs_cluster_name)
          service=$(terraform output -raw ecs_service_name)
          aws ecs wait services-stable --cluster "$cluster" --services "$service"

      - name: Verify rollout completed
        run: |
          cluster=$(terraform output -raw ecs_cluster_name)
          service=$(terraform output -raw ecs_service_name)
          read -r rollout td <<< "$(aws ecs describe-services \
            --cluster "$cluster" --services "$service" \
            --query "services[0].deployments[?status=='PRIMARY']|[0].[rolloutState,taskDefinition]" \
            --output text)"
          echo "PRIMARY rolloutState: $rollout"
          test "$rollout" = "COMPLETED"

      - name: Wait for Target Group healthy
        run: |
          tg=$(terraform output -raw target_group_arn)
          deadline=$((SECONDS+600))
          while :; do
          states=$(aws elbv2 describe-target-health --target-group-arn "$tg"  \
            --query "TargetHealthDescriptions[].TargetHealth.State" --output text || true)
          echo "Target states: $states"
          if [ -n "$states" ] && ! grep -qv healthy <<< "$states"; then
          echo "All targets healthy"; break
          fi
          [ $SECONDS -gt $deadline ] && echo "Timed out waiting for healthy targets" && exit 1
          sleep 5
          done

      - name: App health check via ALB
        run: |
          url=$(terraform output -raw alb_dns_name)
          curl -fsS --retry 30 --retry-connrefused --retry-delay 2 "http://$url/healthz" -o /dev/null


  slackNotificationSuccess:
    name: Slack Notification (Success)
    runs-on: ubuntu-latest
    needs: deploy
    if: needs.deploy.result == 'success'
    steps:
      - name: Send Success Notification
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ github.server_url }}/${{ github.repository }}|AI Coding Agent> ${{ inputs.environment_tag}}  deployment rolled out successfully :white_check_mark:"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Image deployed: ${{ inputs.service_name }}:${{ inputs.image_tag }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "> Check the logs for <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|details>."

  slackNotificationFailure:
    name: Slack Notification (Failure)
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && needs.deploy.result == 'failure'
    steps:
      - name: Send Failure Notification
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "<${{ github.server_url }}/${{ github.repository }}|AI Coding Agent> ${{ inputs.environment_tag}} deployment rolled out failed :x:"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "Image deployed: ${{ inputs.service_name }}:${{ inputs.image_tag }}"
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: "> Check the logs for <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|details>."
